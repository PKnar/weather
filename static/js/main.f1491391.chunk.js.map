{"version":3,"sources":["components/Charts.js","App.js","serviceWorker.js","index.js"],"names":["Chart","react_default","a","createElement","className","es","data","this","props","tempChartData","height","width","options","title","display","text","fontSize","fontColor","legend","position","scales","yAxes","ticks","beginAtZero","pressureChartData","cityChartData","temperatureDifferenceData","React","Component","App","state","callBackendAPI","_callee","response","body","timeStampRun","countOfCities","countOfItems","sumOfTemp","sumOfWind","sumOfPressure","latestReport","forecastDate","temperatureDifference","prop","file","regenerator_default","wrap","_context","prev","next","fetch","sent","json","status","Error","message","dir","push","labels","datasets","label","borderColor","backgroundColor","_this","setState","stop","Charts","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1491391.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Bar, Line } from \"react-chartjs-2\";\r\n\r\nclass Chart extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"chart\">\r\n        <Line\r\n          data={this.props.data.tempChartData}\r\n          height=\"auto\"\r\n          width=\"auto\"\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: \"Sum of Temperature & Wind\",\r\n              fontSize: 25,\r\n              fontColor: \"white\"\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: \"right\"\r\n            },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  ticks: {\r\n                    beginAtZero: true\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }}\r\n        />\r\n\r\n        <Line\r\n          data={this.props.data.pressureChartData}\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: \"Sum of Pressure\",\r\n              fontSize: 25,\r\n              fontColor: \"white\"\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: \"right\"\r\n            },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  ticks: {\r\n                    beginAtZero: true\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }}\r\n        />\r\n        <Bar\r\n          data={this.props.data.cityChartData}\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: \"Number of Cities\",\r\n              fontSize: 25,\r\n              fontColor: \"white\"\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: \"right\"\r\n            },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  ticks: {\r\n                    beginAtZero: true\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }}\r\n        />\r\n        <Line\r\n          data={this.props.data.temperatureDifferenceData}\r\n          options={{\r\n            title: {\r\n              display: true,\r\n              text: \"Temperature difference \",\r\n              fontSize: 25,\r\n              fontColor: \"white\"\r\n            },\r\n            legend: {\r\n              display: true,\r\n              position: \"right\"\r\n            },\r\n            scales: {\r\n              yAxes: [\r\n                {\r\n                  ticks: {\r\n                    beginAtZero: true\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React, { Component } from \"react\";\nimport Chart from \"./components/Charts.js\";\n\nclass App extends Component {\n  state = {\n    data: {}\n  };\n\n  componentWillMount() {\n    this.callBackendAPI();\n  }\n\n  callBackendAPI = async () => {\n    const response = await fetch(\"/data\");\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n    const timeStampRun = [];\n    const countOfCities = [];\n    const countOfItems = [];\n    const sumOfTemp = [];\n    const sumOfWind = [];\n    const sumOfPressure = [];\n    const latestReport = [];\n    const forecastDate = [];\n    const temperatureDifference = [];\n\n    for (const prop in body.dir) {\n      const file = body.dir[prop];\n      timeStampRun.push(file.timeStampRun);\n      countOfCities.push(file.countOfCities);\n      countOfItems.push(file.countOfItems);\n      sumOfTemp.push(file.sumOfTemp);\n      sumOfWind.push(file.sumOfWind);\n      sumOfPressure.push(file.sumOfPressure);\n      latestReport.push(file.latestReport);\n      if (file.forecastDate) {\n        forecastDate.push(file.forecastDate);\n      }\n      if (file.temperatureDifference) {\n        temperatureDifference.push(file.temperatureDifference);\n      }\n    }\n\n    const tempChartData = {\n      labels: latestReport,\n      datasets: [\n        {\n          label: \"Sum of temp\",\n          data: sumOfTemp,\n          borderColor: \"red\"\n        },\n        {\n          label: \"Sum of wind\",\n          data: sumOfWind,\n          backgroundColor: \"blue\"\n        }\n      ]\n    };\n\n    const pressureChartData = {\n      labels: latestReport,\n      datasets: [\n        {\n          label: \"Sum of Pressure\",\n          data: sumOfPressure,\n          borderColor: \"#20fe23\"\n        }\n      ]\n    };\n\n    const cityChartData = {\n      labels: latestReport,\n      datasets: [\n        {\n          label: \"Number of Cities \",\n          data: countOfCities,\n          backgroundColor: \"#29c9ff\"\n        }\n      ]\n    };\n\n    const temperatureDifferenceData = {\n      labels: forecastDate,\n      datasets: [\n        {\n          label: \"Temperature difference compared with Met.no \",\n          data: temperatureDifference,\n          borderColor: \"purple\"\n        }\n      ]\n    };\n\n    this.setState({\n      data: {\n        tempChartData,\n        pressureChartData,\n        cityChartData,\n        temperatureDifferenceData\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\" />\n\n        <Chart data={this.state.data} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}